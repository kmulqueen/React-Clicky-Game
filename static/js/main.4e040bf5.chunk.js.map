{"version":3,"sources":["components/PersonCard/PersonCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["PersonCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","correctIncorrect","topScore","score","Wrapper","children","Title","Container","concat","fluid","Row","Column","size","split","map","join","App","state","people","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledDeck","array","i","length","j","Math","floor","random","_ref","randomize","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Title_Title","src_Container","src_Row","person","src_Column","components_PersonCard_PersonCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e040bf5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./PersonCard.css\";\r\n\r\n\r\nconst PersonCard = props => (\r\n    <div\r\n        className=\"card\"\r\n        value={props.id}\r\n        onClick={() => props.handleClick(props.id)}\r\n    >\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PersonCard;","import React from \"react\";\r\nimport \"./Nav.css\";\r\nconst Nav = props => (\r\n    <nav>\r\n        <ul>\r\n            <li className=\"brand\">\r\n                <a href=\"/clicky-game/\">{props.title}</a>\r\n            </li>\r\n            <li id=\"correct-incorrect\">{props.correctIncorrect}</li>\r\n            <li className=\"alignRight\">Score - Top: {props.topScore} | Current: {props.score}</li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nconst Container = props =>\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Row = props =>\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nconst Column = props => {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n  return (\r\n    <div className={size}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;","import React, { Component } from 'react';\nimport PersonCard from \"./components/PersonCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport people from \"./people.json\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport \"./App.css\";\n\nfunction randomize(array) {\n  for(let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  state = {\n    people,\n    currentScore: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: []\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({\n        clicked: this.state.clicked.concat(id)\n      });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"Nice, keep going!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({\n        topScore: newScore\n      });\n    } else if(newScore === 12) {\n      this.setState({\n        correctIncorrect: \"You win!\"\n      });\n    }\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledDeck = randomize(people);\n    this.setState({\n      people: shuffledDeck\n    });\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"Try again!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"React Clicky Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          correctIncorrect={this.state.correctIncorrect}\n        />\n\n        <Title>\n          Click on an image to earn points, but don't click on an image more than once!\n        </Title>\n        <Container>\n          <Row>\n            {this.state.people.map(person => (\n              <Column size=\"md-3 sm-6\">\n                <PersonCard\n                  key={person.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={person.id}\n                  image={person.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}